/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.16
 * Generated at: 2017-07-21 00:54:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.chatting;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class singleChattingA_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("\r\n");
      out.write("<title>채팅페이지</title>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/pcm/Resources/css/bootstrap.css\">\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("\t\tbackground-image: url('/pcm/img/kakao2.jpg'); background-size: cover;\r\n");
      out.write("\t\tbackground-repeat : no-repeat;\r\n");
      out.write("\t}\r\n");
      out.write("button {\r\n");
      out.write("\t    background-color: #fcb259;\r\n");
      out.write("\t    color: white;\r\n");
      out.write("\t    padding: 14px 20px;\r\n");
      out.write("\t    margin: 8px 0;\r\n");
      out.write("\t    border: none;\r\n");
      out.write("\t    cursor: pointer;\r\n");
      out.write("\t    width: 100%;\r\n");
      out.write("\t}\r\n");
      out.write("input[type=text], input[type=tel], input[type=password] {\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("   width: 300px;\r\n");
      out.write("   padding: 12px 20px;\r\n");
      out.write("   margin: 8px 0;\r\n");
      out.write("   display: inline-block;\r\n");
      out.write("   border: 1px solid #ccc;\r\n");
      out.write("   box-sizing: border-box;\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>  \r\n");
      out.write("<input id=\"inputMessage\" type=\"text\"\r\n");
      out.write("\t\tonkeydown=\"if(event.keyCode==13){send();}\" />\r\n");
      out.write("<input type=\"submit\" class=\"btn btn-danger btn-lg\" value=\"전송\" onclick=\"send();\"/>\r\n");
      out.write("<div id=\"messageWindow2\" style=\"padding:10px 0; height: 20em; overflow: auto;\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");

	String id = "";
	if (session.getAttribute("id") != null) {
		id = (String) session.getAttribute("id");
	}
	
	String nick = (String)session.getAttribute("memberId");
	String grade = (String)session.getAttribute("grade");
	if (session.getAttribute("nick") != null) {
		nick = (String) session.getAttribute("nick");
	} else {
		nick = (String)session.getAttribute("memberId");
	} 

      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tvar webSocket = new WebSocket('ws://localhost:8070/pcm/singleBroadcasting');\r\n");
      out.write("\t\tvar inputMessage = document.getElementById('inputMessage');\r\n");
      out.write("\t\tvar re_send = \"\";\r\n");
      out.write("\t\tvar cnt = 0;\r\n");
      out.write("\t\twebSocket.onerror = function(event) {\r\n");
      out.write("\t\t\tonError(event)\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\twebSocket.onopen = function(event) {\r\n");
      out.write("\t\t\tonOpen(event)\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\twebSocket.onmessage = function(event) {\r\n");
      out.write("\t\t\tonMessage(event)\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction onMessage(event) {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar message = event.data.split(\"|\");\r\n");
      out.write("\t\t\t\tif(message[0] != re_send) {\r\n");
      out.write("\t\t\t\t\tvar who = document.createElement('div');\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\twho.style[\"padding\"]=\"10px\";\r\n");
      out.write("\t\t\t\t\twho.style[\"margin-left\"]=\"10px\";\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\twho.innerHTML = message[0];\r\n");
      out.write("\t\t\t\t\tdocument.getElementById('messageWindow2').appendChild(who);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tre_send = message[0];\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar div=document.createElement('div');\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tdiv.style[\"width\"]=\"auto\";\r\n");
      out.write("\t\t\t\tdiv.style[\"word-wrap\"]=\"break-word\";\r\n");
      out.write("\t\t\t\tdiv.style[\"display\"]=\"inline-block\";\r\n");
      out.write("\t\t\t\tdiv.style[\"background-color\"]=\"#fcfcfc\";\r\n");
      out.write("\t\t\t\tdiv.style[\"border-radius\"]=\"10px\";\r\n");
      out.write("\t\t\t\tdiv.style[\"padding\"]=\"10px\";\r\n");
      out.write("\t\t\t\tdiv.style[\"margin-left\"]=\"10px\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tdiv.innerHTML = message[2];\r\n");
      out.write("\t\t\t\talert(\"메시지가 도착했습니다!\")\r\n");
      out.write("\t\t\t\tdocument.getElementById('messageWindow2').appendChild(div);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\tvar clear=document.createElement('div');\r\n");
      out.write("\t\t\tclear.style[\"clear\"]=\"both\";\r\n");
      out.write("\t\t\tdocument.getElementById('messageWindow2').appendChild(clear);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tmessageWindow2.scrollTop = messageWindow2.scrollHeight;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction onClose(event) {\r\n");
      out.write("\t\t\tvar div=document.createElement('div');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\twebSocket.send(\"");
      out.print(nick);
      out.write(" is DisConnected\\n\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction onOpen(event) {\r\n");
      out.write("\t\t\tvar div=document.createElement('div');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tdiv.style[\"text-align\"]=\"center\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tdiv.innerHTML = \"관리자 전용 1:1 채팅\";\r\n");
      out.write("\t\t\tdocument.getElementById('messageWindow2').appendChild(div);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar clear=document.createElement('div');\r\n");
      out.write("\t\t\tclear.style[\"clear\"]=\"both\";\r\n");
      out.write("\t\t\tdocument.getElementById('messageWindow2').appendChild(clear);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\twebSocket.send(\"");
      out.print(nick+"|"+grade);
      out.write("|안녕하세요^^\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction onError(event) {\r\n");
      out.write("\t\t\talert(\"chat_server connecting error \" + event.data);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction send() {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(inputMessage.value!=\"\"){\r\n");
      out.write("\t\t\t\twebSocket.send(\"");
      out.print(nick+"|"+grade);
      out.write("|\"+ inputMessage.value);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar div=document.createElement('div');\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tdiv.style[\"width\"]=\"auto\";\r\n");
      out.write("\t\t\t\tdiv.style[\"word-wrap\"]=\"break-word\";\r\n");
      out.write("\t\t\t\tdiv.style[\"float\"]=\"right\";\r\n");
      out.write("\t\t\t\tdiv.style[\"display\"]=\"inline-block\";\r\n");
      out.write("\t\t\t\tdiv.style[\"background-color\"]=\"#ffea00\";\r\n");
      out.write("\t\t\t\tdiv.style[\"padding\"]=\"3px\";\r\n");
      out.write("\t\t\t\tdiv.style[\"border-radius\"]=\"3px\";\r\n");
      out.write("\t\t\t\tdiv.style[\"margin-right\"]=\"3px\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tdiv.innerHTML = inputMessage.value;\r\n");
      out.write("\t\t\t\tdocument.getElementById('messageWindow2').appendChild(div);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar clear = document.createElement('div');\r\n");
      out.write("\t\t\t\tclear.style[\"clear\"] = \"both\";\r\n");
      out.write("\t\t\t\tdocument.getElementById('messageWindow2').appendChild(clear);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tinputMessage.value = '';\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tmessageWindow2.scrollTop = messageWindow2.scrollHeight;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tre_send = \"");
      out.print(nick);
      out.write("\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("<script src=\"http://ajax.googleapis.com/ajax/libs/jqery/1.12.4/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/bootstrap.js\"></script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
